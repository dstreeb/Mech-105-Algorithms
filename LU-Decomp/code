function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = coefficient matrix
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%       P = the permutation matrix
[n m]=size(A);
 

if nargin ~= 1
    error('Only input 1 matrix');
end

if n ~= m
    error('Input a square Matrix');
end
P=eye(n,m);
L=zeros(n,n);
U=A; 

for a=1:(n-1)
    [t,b]=max(abs(U(a:n, a))); 
    b=b+(a-1); 
   
    U([a,b], :) = U([b,a], :);
    P([a,b], :) = P([b,a], :); 
    L([a,b], :) = L([b,a], :); 
    for b=(a+1):n
        mu = -U(b,a)/U(a,a);
        U(b,:)=U(b,:)+mu*U(a,:);
        L(b,a)=-mu; 
    end
end
L = L+eye(n,n); 
end 
